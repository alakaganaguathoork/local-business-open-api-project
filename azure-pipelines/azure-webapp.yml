name: 'appDeploy-$(Date:yyyy-MM-dd)$(Rev:.r)'

trigger:
  branches:
    include:
    - azure-pipeline
  paths:
    include:
    - app/*
    - azure-pipelines/templates/*
    - azure-pipelines/azure-webapp.yml

variables:
  azureServiceConnectorId: azure-connector
  projectRoot: $( System.DefaultWorkingDirectory )
  pythonVersion: "3.13"

  # apps: | 
    # [
      # "app1": 'name: "app-1-27rbhbD"
      # type: "webAppLinux"
      # resourceGroup: "resource-group-test"'
    # ]

pool:
  name: Local

stages:
  - stage: GatherInfo
    displayName: "Gather apps info"
    variables:
    - group: Main
    jobs:
    - job: GetAppDataJob
      displayName: "Get apps data"
      steps:
      - task: AzureCLI@2
        name: GetAppDataTask
        displayName: "Get App Services names"
        inputs:
          scriptType: bash
          scriptLocation: inlineScript
          azureSubscription: "${{ azureServiceConnectorId }}"
          inlineScript: |
            apps=$(az webapp list --query "[].{name:name, type:kind, resourceGroup:resourceGroup}" -o json)
        
            # Process and compact the JSON for use as pipeline output
            compacted=$(echo "$apps" | jq -c '[.[] | {name, type: (if .type | contains("linux") then "webAppLinux" else "webApp" end), resourceGroup}]')
        
            echo "Compact JSON: $compacted"
        
            # Set output variable
            echo "##vso[task.setvariable variable=apps;isOutput=true]$compacted"
  
    - job: BuildAndDeploy
      displayName: "Build and Deploy"
      dependsOn: GetAppDataJob
      condition: |
          and( succeeded(), ne( length( dependencies.GetAppDataJob.outputs['GetAppDataTask.apps'] ), 0 ))
      variables:
        appsJson: $[ dependencies.GetAppDataJob.outputs['GetAppDataTask.apps'] ]
        deps: $[ stageDependencies ] 
      steps:
      - script: echo $(appsJson)
      
      - script: echo $(deps)

      - bash: |
          touch .env
        name: CreateEnvFile
        displayName: "Create .env file"
        workingDirectory: $( projectRoot )/app

      - bash: |
          echo "APP_ENV=$(APP_ENV)" >> ./.env
          echo "X_RAPIDAPI_KEY=$(X_RAPIDAPI_KEY)" >> ./.env
        name: SaveEnvVaribalesInFile
        displayName: "Save env varibales in .env"
        workingDirectory: $( projectRoot )/app

      - bash: |
          python -m venv antenv
          source antenv/bin/activate
          pip install --no-cache-dir -r requirements.txt
        name: InstallDependencies
        displayName: "Install Python dependencies"
        workingDirectory: $( projectRoot )/app

      - task: ArchiveFiles@2
        name: ZipFiles
        displayName: "Archive Python App"
        inputs:
          rootFolderOrFile: 'app'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$( Build.ArtifactStagingDirectory )/app.zip'
          replaceExistingArchive: true
        
      - ${{ each app in variables.apps }}:
        - task: AzureWebApp@1
          name: AzureWebApp_${{ replace(app.name, '-', '_') }}
          displayName: "Deploy to ${{ app.name }}"
          inputs:
            azureSubscription: $( azureServiceConnectorId )
            appName: ${{ app.name }}
            appType: ${{ app.type }}
            resourceGroupName: ${{ app.resourceGroup }}
            package: $(Build.ArtifactStagingDirectory)/app.zip
            runtimeStack: "PYTHON|${{ pythonVersion }}"
            startUpCommand: "python app.py"
          env:
            SCM_DO_BUILD_DURING_DEPLOYMENT: true
            APP_ENV: $( APP_ENV )
            X_RAPIDAPI_KEY: $( X_RAPIDAPI_KEY )

      