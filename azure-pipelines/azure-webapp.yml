name: 'appDeploy-$(Date:yyyy-MM-dd)$(Rev:.r)'

trigger:
  branches:
    include:
    - azure-pipeline
  paths:
    include:
    - app/*
    - azure-pipelines/templates/*
    - azure-pipelines/azure-webapp.yml

variables:
  azureServiceConnectorId: azure-connector
  projectRoot: $( System.DefaultWorkingDirectory )
  pythonVersion: "3.13"
  # apps: | 
    # [
      # "app1": 'name: "app-1-27rbhbD"
      # type: "webAppLinux"
      # resourceGroup: "resource-group-test"'
    # ]

pool:
  name: Local

stages:
  - stage: GatherInfo
    displayName: "Gather apps info"
    variables:
    - group: Main
    jobs:
    - job: GetAppDataJob
      displayName: "Get apps data"
      steps:
      - task: AzureCLI@2
        name: GetAppDataTask
        displayName: "Get App Services names"
        inputs:
          scriptType: bash
          scriptLocation: inlineScript
          azureSubscription: $( azureServiceConnectorId )
          inlineScript: |
            apps=$(az webapp list --query "[].{name:name, type:kind, resourceGroup:resourceGroup}" -o json)
        
            # Process and compact the JSON for use as pipeline output
            compacted=$(echo "$apps" | jq -c '[.[] | {name, type: (if .type | contains("linux") then "webAppLinux" else "webApp" end), resourceGroup}]')
        
            echo "Compact JSON: $compacted"
        
            # Set output variable
            echo "##vso[task.setvariable variable=apps;isOutput=true]$compacted"
  
  - stage: BuildAndDeploy
    displayName: "Build and Deploy"
    jobs:
    - job: BuildAndDeploy
      displayName: "Build and Deploy"
      dependsOn: GetAppDataJob
      variables:
        appsJson: $[ dependencies.GatherInfo.GetAppDataJob.outputs['GetAppDataTask.apps'] ]
        deps: $[ stageDependencies ] 
      steps:
      - script: echo $(appsJson)
      
      - script: echo $(deps)

      - template: templates/deploy-web-app-template.yml
        parameters:
          azureServiceConnectorId: ${{ variables.azureServiceConnectorId }}
          projectRoot: ${{ variables.projectRoot }}
          apps: ${{ variables.appsJson }}
          pythonVersion: ${{ variables.pythonVersion }}

      