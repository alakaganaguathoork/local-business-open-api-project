parameters:
  - name: stageName
    type: string

  - name: dependsOn
    type: object
    default: []

  - name: environment
    type: string

  - name: regionName
    type: string

  - name: awsCredentials
    type: string

  - name: manifests
    type: object
    default: []

stages:
  - stage: Deploy
    displayName: Deploy k8s ${{ parameters.manifests.name }}
    dependsOn: ${{ parameters.dependsOn }}
    jobs:
      - job: GetCallerIdentity
        displayName: Get caller identity
        steps:
          - checkout: none



      - deployment: Deployment
        displayName: Deployment
        environment: ${{ parameters.environment }}
        dependsOn: GetCallerIdentity
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
               
                - task: AWSCLI@1
                  name: GetCallerIdentity
                  displayName: Running aws sts get-caller-identity
                  inputs:
                    awsCredentials: ${{ parameters.awsCredentials }}
                    regionName: ${{ parameters.regionName }}
                    awsCommand: 'sts'
                    awsSubCommand: 'get-caller-identity'

                - bash: |
                    echo "##vso[task.setvariable variable=AWS_ACCESS_KEY_ID;issecret=true]$AWS_ACCESS_KEY_ID"
                    echo "##vso[task.setvariable variable=AWS_SECRET_ACCESS_KEY;issecret=true]$AWS_SECRET_ACCESS_KEY"
                    echo "##vso[task.setvariable variable=AWS_SESSION_TOKEN;issecret=true]$AWS_SESSION_TOKEN"
                  name: export

                - bash: |
                    mkdir ~/.aws
                    touch ~/.aws/credentials
                    tee ~/.aws/credentials <<EOF
                      [default]
                      AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
                      AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY)
                    EOF
                  name: store

                - ${{ each item in parameters.manifests }}:
                  - task: Bash@3
                    name: ${{ format('Install{0}', item.name) }}
                    displayName: Install ${{ item.name }} provided manifests
                    inputs:
                      targetType: inline
                      script: |
                        kubectl apply -f ${{ item.manifest }}
        workspace:
          clean: all