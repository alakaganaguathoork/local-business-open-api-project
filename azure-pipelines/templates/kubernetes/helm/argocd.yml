parameters:
  - name: deploymentName
    type: string
  - name: dependsOn
    type: object
    default: []
  - name: environment
    type: string
  - name: awsRegion
    type: string
  - name: awsClusterName
    type: string

jobs:
  - deployment: ${{ parameters.deploymentName }}
    displayName: ${{ parameters.deploymentName }}
    dependsOn: ${{ parameters.dependsOn }}
    environment: ${{ parameters.environment }}
    variables:
      namespace: argocd
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self

            - task: Bash@3
              name: update_config
              displayName: aws eks update-kubeconfig
              condition: succeeded()
              inputs:
                targetType: inline
                script: |
                  aws eks update-kubeconfig \
                    --region ${{ parameters.awsRegion }} \
                    --name ${{ parameters.awsClusterName }}

            # - task: Bash@3
            #   name: deploy_argocd
            #   displayName: deploy argocd
            #   condition: succeeded()
            #   inputs:
            #     targetType: inline
            #     script: |
            #       helm repo add argo https://argoproj.github.io/argo-helm
            #       helm repo update

            #       helm uninstall argocd -n argocd || true
            #       kubectl delete crd applications.argoproj.io applicationsets.argoproj.io appprojects.argoproj.io  
            #       kubectl delete namespace $(namespace) --ignore-not-found

            #       helm upgrade \
            #         --install argocd argo/argo-cd \
            #         --namespace $(namespace) \
            #         --create-namespace \
            #         --reuse-values \
            #         --values $(System.DefaultWorkingDirectory)/kubernetes/helm/helpers/argocd/argocd-custom-values-local.yaml
                  
            - task: Bash@3
              name: argocd_get_admin_password
              displayName: argocd get initial admin password
              inputs:
                targetType: inline
                script: |
                  EARGO_PWD=$(htpasswd -nbBC 10 "" "$(ARGO_ADMIN_PWD)" | tr -d ':\n' | sed 's/^\$2y/\$2a/') 

                  kubectl -n argocd patch secret argocd-secret \
                    --type merge \
                    -p "$(jq -n --arg pwd "$EARGO_PWD" --arg mtime "$(date +%FT%T%Z)" \
                        '{stringData: {"admin.password": $pwd, "admin.passwordMtime": $mtime}}')"
                  ARGOCD_ADMIN_PASS=$(kubectl -n $(namespace) get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
                  echo "##vso[task.setvariable variable=ARGOCD_ADMIN_PASS;]$ARGOCD_ADMIN_PASS"
              
            - task: Bash@3
              name: argocd_display_admin_password
              displayName: argocd display admin password
              condition: succeeded()
              inputs:
                targetType: inline
                script: |
                  SERVICE_IP=$(kubectl get svc -n $(namespace) argocd-server \
                    -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
                  echo "ArgoCD URL: $SERVICE_IP"
                  echo "ArgoCD admin password: $(echo $ARGOCD_ADMIN_PASS)"
