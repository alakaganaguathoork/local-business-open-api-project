name: 'eks-$(Date:yyyy-MM-dd)$(Rev:.r)'

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - azure-pipelines/eks.yml

pool:
  name: 'Local'

variables:
  group:  'AWS'
  azureServiceConnector: 'aws-oidc-federation'
  awsRegionName: 'us-east-1'
  projectRoot: $(System.DefaultWorkingDirectory)

stages:
  - stage: DeployToEKS
    displayName: Deploy to EKS
    jobs:
      - job: Deploy
        workspace:
          clean: all
        displayName: Deploy Application
        steps:
        - task: Bash@3
          displayName: 'Debug â€” Show working dir'        
          inputs:
            targetType: inline
            script: |
              echo "Working directory from variables: $(projectRoot)"

        - task: Bash@3
          displayName: 'Intall AWS CLI'
          inputs:
            targetType: inline
            script: |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install --update

        - task: AWSCLI@1
          displayName: "Running aws-cli get-caller-identity"
          # continueOnError: true # If you need the pipeline to succeed
          inputs:
            awsCredentials: $(azureServiceConnector)
            regionName: $(awsRegionName)
            awsCommand: 'sts'
            awsSubCommand: 'get-caller-identity'
          
        # - task: Bash@3
          # displayName: 'Test'
          # inputs:
            # targetType: 'inline'
            # script: |
              # AUDIENCE="<replace with application ID URI configured in step 4>"
              # ROLE_ARN="<replace with IAM Role ARN created in step 6>"
              # access_token=$(curl "http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=${AUDIENCE}" -H "Metadata:true" -s| jq -r '.access_token')
              # credentials=$(aws sts assume-role-with-web-identity --role-arn ${ROLE_ARN} --web-identity-token ${access_token} --role-session-name AWSAssumeRole | jq '.Credentials' | jq '.Version=1')
              # AccessKeyId=$(echo "$credentials" | jq -r '.AccessKeyId')
              # SecretAccessKey=$(echo "$credentials" | jq -r '.SecretAccessKey')
              # SessionToken=$(echo "$credentials" | jq -r '.SessionToken')
              # echo "##vso[task.setvariable variable=AWS.AccessKeyID]$AccessKeyId"
              # echo "##vso[task.setvariable variable=AWS.SecretAccessKey]$SecretAccessKey"
              # echo "##vso[task.setvariable variable=AWS.SessionToken]$SessionToken"
