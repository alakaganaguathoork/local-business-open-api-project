name: 'infra-$(Date:yyyy-MM-dd)$(Rev:.r)'

trigger:
  branches:
    include:
      - azure-pipeline
  paths:
    include:
      - terraform/*
      - azure-pipelines/terraform-provisioning.yml

pool:
  name: Local

variables:
  TF_VERSION: "1.11.4"
  TF_WORKING_DIR: "terraform/azure-app-service"

stages:
  - stage: Terraform_infra
    displayName: "Terraform infrastucture provisioning"
    variables:
    - group: "ARM_"

    jobs:
    - job: Terraform_Provisioning
      displayName: "Provision Terraform Infra"
      steps:
        
        - task: TerraformInstaller@1
          inputs:
            terraformVersion: "$(TF_VERSION)"
          displayName: "Install Terraform v$(TF_VERSION)"
        
        - script: |
            terraform init
          name: TerraformInit
          workingDirectory: "$(TF_WORKING_DIR)"
          displayName: "Init Terraform"
            
        - script: |
            terraform plan -detailed-exitcode || exit_code=$?
            echo "##vso[task.setvariable variable=tf_exit_code]$exit_code"
          name: TerraformPlan
          workingDirectory: "$(TF_WORKING_DIR)"
          displayName: "Plan Terraform"
        
        - script: |
            terraform apply --auto-approve
          name: TerraformApply
          condition: eq(variables['tf_exit_code'], '2')  # only if changes are detected
          workingDirectory: "$(TF_WORKING_DIR)"
          displayName: "Apply Terraform"
        
        - script:  |
            echo "Skipping apply, no changes detected."
          name: SkipTerraformApply
          condition: eq(variables['tf_exit_code'], '0')
          displayName: "[informal] No changes to apply"
        
        # - script: |
            # terraform destroy --auto-approve
          # name: TerraformDestroy
          # workingDirectory: "$(TF_WORKING_DIR)"
          # displayName: "Destroy Terraform"
